                wlanpoke User Manual Version 0.8.7.1

Introduction

The wlanpoke software attempts to mitigate the "Wireless Connectivity Loss" issues suffered by the current version Squeezebox Baby radio software. The software periodically tests the wireless network, and if it fails for a while, restarts the wireless system without rebooting. The resulting network outage is under a minute, which may or may not interrupt music playback for a time or until resumed.

Connected ssh sessions frequently stay open during a restart.

The software sends failure incident report 'logs' to a computer running netcat (nc or ncat) as a server or a similar tcp logger. This computer should have enough disk space to accommodate log files. One or multiple servers on one or more machines can be used, and the software is configured to report to one of them.

Besides mitigating the wireless connectivity issue, the software instruments the radio's wireless behavior, and this data may be useful to developers troubleshooting the issues. However, you may not want that data collected and/or preserved. Fortunately, affirmative steps are required to setup and enable data logging. Also, the software has the option of disabling logging.

The software is implemented as the shell script "wlanpoke.sh." plus supporting files and documentation. There is also an optional script simple 'web server' to serve statistics to a web browser.

This software has been rushed together in response to an emergency of constantly failing radios. Versions have been keeping the author's 4 SB and 2 UE radios connected for 8 months as of this writing. Several users have downloaded previous versions, and they have reported that it has generally worked to keep their radios usable. This software is just a temporary partial mitigation of a serious reliability issue that has arisen during 2020. This was caused by the rapid adoption of WiFi-6 (80211.ax) and mesh networking during the COVID pandemic. There are many un- or under-tested functions and features, multitudes of bugs, questionable methods, and coding ugliness. Please assist in pointing these out or fixing them.

We hope this software will become obsolete when the root causes of the unreliability have been fixed. In the mean time, your kind suggestions and improvements are appreciated. Please feel free to modify and adapt the scripts for your own purposes. And please feel free to join the effort to find real lasting solutions to this issue.

Please address your responses to the slimdevices forums in the README.md file, which also contains news.

NOTE: Experimental Failure Reduction

This version is an experimental release that incorporates a brute force application of an experimental method to reduce WLAN failure. Some portable or mobile functionality may be degraded. You may wish to revert your system to a previous version. Check for updates. Read history.txt. Please post your experiences on the Squeezebox Radio forum and the GitHub issues tab.

A possible cause for failure has been identified as too frequent scanning for alternate access points by the radio even when connected to a strong signal router or access point. This scanning may encounter signals or packets that cause the radio to lose wireless sensitivity, degrade reception, and eventually fail. This version includes a function to attempt to reduce the number of these scans. The function uses very poorly or undocumented calls to the radio's wireless driver and chip in the belief that this will have the desired effect. Testing over a few days suggests that this provides a dramatic improvement in some cases. However, other use cases, especially ones that require frequent switching wireless networks, may be degraded. 

The function is controlled by a small text file in the install directory (/etc/wlanpoke) named "scanctrl.inc." It contains at minimum 6 numbers that disable or enable various aspects of the radio's scan function under some circumstances. The default is a list of 6 zeros, to disable everything possible with this function. That may be too much for your use case.

If your experience is degraded, you may wish to disable this function altogether. To do so, overwrite any existing "scanctrl.inc." file with a short (< 11 character) message, e.g.,
  echo "stop" > scanctrl.inc
will do it. Or you can delete the file and then "touch scanctrl.inc" to create a zero length file. If you delete the file, it will be recreated with default values the next time wlanpoke launches.
You can experiment with the parameters on the fly, e.g., 
  echo "0 0 1 0 0 0" > scanctrl.inc
They will be applied after the next quick or full reset. 


Usage

For normal usage, this script is launched at boot up by an entry in the rcS.local file. It can be launched at a shell prompt:

  /etc/wlanpoke.sh &

or

  /etc/init.d/rcS.local

to launch it as it would be at boot-up.


If you don't want to include wlanpoke.sh in the boot up sequence, you may want to enjoy or suppress terminal chatter by setting a higher or lower log level of over 3 for more or perhaps under 3 for less. Log level 8 (-l 8) is the most verbose.

The software will try to send messages to a logging server, by default the computer running Logitech Media Server (LMS) on the default port (1121). If you are running the logging server on another machine, change the (-t) option to the server ip address and possibly the (-p) option to the server ip port.


Web Page

If you have enabled the optional 'web' server, you can view a status page and more from your browser (e.g., Firefox). The status page displays a wealth of information about the radio, and you can add more. The default URL is:

  http://<radio_ip_address>:<port>

where you substitute your radio's ip address (or host name, if that works on your LAN) followed by a colon (':') then the port number (default 8080). For example (change the ip address):

  http://192.168.0.55:8080

This will display a "<RadioName> Statistics" status page.

There are two versions of the optional web server, so-called 'quick' and 'slow' versions. These are disabled by default, you must add an option to the wlanpoke launch command to enable them, see below.

The 'quick' server responds quite quickly and displays only the status page, however, the display is out of date, and you should refresh the page to get more up-to-date information. That may not be so 'quick' after all, although it does use a bit less resources.

The 'slow' server takes about 1 second to run code to parse the URL. You can display files in the installation folder, and do perhaps other mischief. Because of this, the slow server is not the default, but more useful because it supports the 'RawFails' request.

You can change what the page displays by editing the script that creates the page, see below.


Desktop Radio Failure Summary Report

Using the optional 'slow' web server allows the radio to respond to different URLs. The URL "RawFails" returns a summary of the failed pings since wlanpoke launch. See Log File Analysis below for an explanation. Enter into a browser, e.g.:

  http://192.168.0.55:8080/RawFails

The included gs.bat file, after customization, can be run at a command prompt to query all your radios and display them or append them to a log file within a few seconds. This script uses the 'curl' utility to call each radio and save the results, but it requires editing the file to include your radio's hostnames or ip addresses. Suggestion: find and install a curl utility.


Logging Server

The software doesn't keep lengthy logs on the radio, which has very limited storage. Instead, it sends incident information to a reliably connected machine with sufficient storage. Regrettably, the radio 'nc' app cannot send reports to a syslog server.

For Windows, keep reading, then see below. The simplest solution is to run netcat (nc) from a linux shell, e.g.,

nc -l -k -p 1121 >> 1121.log &
tail -f 1121.log &

'nc' will (-k) keep (-l) listening on (-p) port 1121 and (>>) append what it receives to "1121.log" and (&) run in the background.

'tail' will display the last 10 lines and (-f) subsequent lines as they are written from the "1121.log" file (&) in the background. Tail is better than 'tee' because you can kill the tail process without disrupting the log collection.

You can launch any number of servers, each with its own port, and configure each radio to report to a specific port. If you open your firewall, these radios can be anywhere... This way, you can be entertained or appalled by each radio's struggles.

Advanced: You could also pipe nc to another nc with the -u udp option to a proper syslog server. You might have to add additional fields to comply with the server.

Depending on who you are and your machine, you may not be able to use the default port. In that case, use another port available to you. BTW, our apologies to any service also wanting to use port 1121. Ports 1120 to 1166 should be available at the time of this writing. According to Wikipedia, 'The range of port numbers from 1024 to 49151 (2^10 to 2^14 + 2^15 - 1) are [sic] the "registered ports."'


Windows Logging Server

Windows has a nifty netcat app (download from nmap.org) called 'ncat'. In some ways it is better than 'nc'. It launches from a command prompt or you can also make a desktop shortcut. It opens a console or command prompt window to display incoming messages, and can also send messages back (but wlanpoke will not receive anything sent). To quit ncat, close the window. To launch, enter

start ncat -l -k -p 1121 -o 1121.log

Add absolute paths to the 'ncat.exe' and the log file as appropriate. 'tail' is not needed for real time console viewing.

A Windows 'feature' causes an inadvertant mouse click to pause ncat, which in turn holds off the script, leading to eventual connection loss. To prevent these accidents, disable Quick Edit Mode: From the ncat window, click the upper left title bar icon to open the system menu, then select Properties to open the console Properties dialog. Click on the Options tab. Under Edit Options, uncheck "Quick Edit Mode," then click Ok to close the dialog and apply the settings. You can still make a selection using the system menu. Make sure ncat is not frozen when you are done.


Command Line Options
The -h option displays the following help:

Usage: wlanpoke.sh [options]
 -x   no tcp logging
 -t * tcp logging server ip address (default <Server>)
 -p * tcp logging server port (default 1121)
 -d * directory to store small logs (default /var/log)
 -b * rotated log numbers to keep (default 3, max=99, t=trim (slow))
 -s * max size (KB) before rotate or trim (default 50, 0=disable, >1024=size in bytes)
 -r * log file record separator (default '-', 0=none)"
 -i * interface (default eth1)
 -H * hostname used by 'dhcpc' and log messages (automatic default <PlayerName>)
 -g * gateway (ping) destination ip address (automatic default) (future)
 -W * optional web server 'quick' for status or 'slow' for more, or 'none' (default 'none')
 -Wp * optional web server port (default 8080)
 -S * seconds to delay between ping tests (default 2)
 -Qm * specific quick reset method (default 'power')"
 -Q * number of pings to fail before quick reset (default -1, enable < 6, disable -1)
 -F * number of pings to fail before full reset (default 6)
 -R   full reset wireless before starting
 -k   kill (stop) any running wlanpoke script and exit
 -z * sleep seconds (default 5)
 -l * log level 0-8 verbosity (default 3)
 -c   show copyright and license notice and exit
 -h   help and version 0.8.7

    * requires a reasonable value: no special chars, options are not validated. E.g.,
      -s 10
      to wait 10 seconds before starting.

Option Notes:

To specify command line options that rarely or never change, change the default values in the 'wlanpoke.sh' script file. Many options are completely described above and in the (-h) help.

-b    Maximum rotated log number 0-99. Set to 'p' to enable log file trim (pruning).
        Pruning removes the oldest entries from the log when it exceeds the maximum size. Pruning uses 'sed' to remove the first entry from the existing log file, which takes some time. Pruning is more convenient than rotation, resulting in only one easy-to-upload log file.
        Rotation requires first concatenating backups (e.g., 'cat $x $x.0 $x.1 $x.2 $x.3 > t.log') prior to upload, briefly doubling the storage. And the log rotation itself, although infrequent, is also time consuming when it happens.
        Fortunately, neither of these methods seems to affect the radio player, with reasonably sized log files, so far.

-s    Sets the maximum log file size before trimming or rotation. Zero ('0') disables the local log file. Values over 1024 are in bytes, otherwise kilobytes.

-r    Use this to separate records in the log file. Records are related log entries triggered by a disconnection. Set to 0 (zero) for no record separator.

-W    This is a fun way to check up on your radio using a browser or other client. Enable the 'quick' mode to display a status web page of wireless diagnostic information, including a vector of failed pings [0..n] prior to recovery. Enable the 'slow' mode to launch a more capable server that can also parse a url, serve a file, and open the radio to who knows what. This feature has just been introduced. Feel free to modify the server scripts, see below.

-Wp   specifies the port the optional server listens to. The default is 8080. You may want to change this to 80, the standard web port.

-S    If you want to speed up the reset after a failure, set this to 1 second.

-Qm	  Specify a quick reset method: one of 'power', 'wpa', or 'ifdnup76'. All methods reassociate with the access point. None of them are fully effective, instead, they delay "the inevitable" repeatedly for a few seconds each time until the next full reset, which restores the connection for a much longer time. Still, the methods recover some connectivity quickly, perhaps quickly enough to avoid gaps in the music, while "warning" the radio that the connection is becoming unreliable (so it could buffer more data for a shorter outage during a full reset). Experiment with this. The default is power, short for power nap. It turns off the radio entirely to save power, requiring a sort of internal reboot to restart. Too bad it is not fully effective. Stay tuned, improvements may be forthcoming. 

-Q    Set this number to a number a few counts lower than the full reset value below to attempt a quick reset, or -1 to disable quick reset. This parameter is set by default to -1 to disable the quick reset method because it works only "99 times out of 100," which occurred because of bugs in previous versions.

-F    Set this number to a lower value to more quickly completely reset the wireless for shorter interruptions if the quick method is not effective.

-R    Use this to restart the wireless network for manunal testing. Not recommended for use during boot up.

-z    Used to delay network testing, typically during boot up. No need to pound on the network when the machine is first starting, give it some time. The software doesn't start to work until the network is first established and the gateway has been set. (was -s)

-g    You may want to ping the LMS machine or the logging server. (Future feature. This value is currently periodically overwritten by the gateway address.)

-i    If 'iwconfig' does not report 'eth1' as the wlan interface, set this value.


For changes to other operating settings, see "Modifying the Script" below.


Installation

First, enable the radio's SSH server. On the radio, navigate:

  Home | Settings | Advanced | Remote Login

and enable SSH.

Make a note of the radio's ip address as displayed in Home | Settings | Advanced | Diagnostics | Wireless Info.

Use an ssh client (e.g., Windows 'putty') to connect to the radio's ip address. The default log in is 'root' with the password '1234'.

If SSH is problematic, you can install and use a hard wired 'TTL' level serial connection to the serial adapter's COM port (e.g., COM3) at 115200 baud. You can also try an Ethernet connection, but this disables the wireless.

Both methods provide an ash (like bash) shell, where you can do linux-y things, such as "ls -al" to get a directory listing.

Optional, to make your life easier: the busybox shell does not contain 'alias', but you can enter shell functions, good for the current shell session:

  pwp () { ps aux | grep wlan ; }
  ll () { ls -al $* ; }

o The 'pwp' shell function lists all processes containing 'wlan' to list wlanpoke processes. Type 'pwp' and press enter. 'kill' plus the pid kills any old running processes.
o The 'll' function lists details for all files matching any arguments you give. 'll *.local' lists the files ending with ".local".
o These ephemeral functions go away after closing the session. You will save time if you put them into root's "/root/.profile" file or the all users "/etc/profile" (no dot).

Of course, you must have already downloaded the zip file so that you can read this manual. Transfer the file. There are several ways to do this. One way is 'tftp' (Trivial FTP). If you don't have a 'tftpd' server running, they are simple to download and install. Put the downloaded wlanpoke-0.8.7.zip in the tftpd root folder, then run:

tftp -g -l wlanpoke-0.8.7.zip -r wlanpoke-0.8.7.zip 192.168.0.4

where "192.168.0.4" is replaced by the tftpd server's ip address.

Alternatively, use WinSCP:
 1. Download and Install WinSCP
 2. Launch. In login, choose protocol SCP, use correct ip address, then user: root, password: 1234
 3. Answer yes to the 2 questions
 4. Transfer the file to the /root folder

At this point, the zip file has been downloaded into the radio.

The suggested installation directory is "/etc/wlanpoke". Create the directory:
  mkdir /etc/wlanpoke

Regrettably, there are several versions of the release zip file: a simple flat file (no directory structure) with the file name wlanpoke.0.8.7.zip (note the period instead of hyphen), and two from the GitHub site that have different naming conventions (e.g., wlanpoke-0.8.7.zip or wlanpoke-main.zip), which duplicate the file name in an included folder, requiring an extra step.

Unzip the files into the installation directory, overwriting anything there:
  unzip -o wlanpoke-0.8.7.zip -d /etc/wlanpoke

See if the zip file had an included folder:
  ls -al /etc/wlanpoke

If you see a folder with the same name as the zip file, that folder contains the new software. Copy or move the contents of that folder to the installation folder, overwriting any existing files:
  mv -f /etc/wlanpoke/wlanpoke-0.8.7/* /etc/wlanpoke

Check again to see that the included files listed below are there:
  ls -al /etc/wlanpoke

Change permissions for the shell scripts to executable:
  chmod 755 /etc/wlanpoke/*.sh
  chmod 755 /etc/wlanpoke/rcS.local.example

(The three shell scripts ahttpd.sh, arequest.sh, and awstats.sh implement the optional web server.)

Change directory to "/etc/init.d" and look for "rcS.local".
  cd /etc/init.d
  ls -al

If it is not there, copy the "rcS.local.example" file the directory, with a new name:
  cp /etc/wlanpoke/rcS.local.example /etc/init.d/rcS.local

Now you have an "rcS.local" file. This is called by 'rcS' at the end of boot up.

Use the venerable 'vi' editor to open and examine rcS.local:
  vi /etc/init.d/rcS.local

"rcS.local" should look like or contain this (without the indents):
  #!/bin/sh
  /usr/bin/logger -s "starting wlanpoke.sh"
  /etc/wlanpoke/wlanpoke.sh &

Edit the "/etc/wlanpoke/wlanpoke.sh &" line to add options before '&' as necessary. Do not delete the trailing ampersand ('&') character, this runs wlanpoke in the background. Hint: 'i' enters insert mode, 'ESC' enters command mode after editing, ":w" writes the edited file, and ":q" quits vi. Isn't that fun?

You may especially need to specify the logging server's ip address "-t" if it is different than the LMS server currently active when the script was launched, e.g.,
  /etc/wlanpoke/wlanpoke.sh -t 192.168.0.4 &

where "192.168.0.4" is the logging server ip address (change this!). If you are running the logging server on another machine, (e.g., a raspberry pi, or on a virtual machine) it will have a different ip address than the LMS server, which may be on some other device that cannot run 'nc'. The logging server should have a reliable (i.e., Ethernet) LAN connection.

If you don't want to send messages to a logging server, use the single "-x" option to suppress them:
  /etc/wlanpoke/wlanpoke.sh -x &
although it is easier to simply not run a server, and let the software just not connect.

You will probably want to enable one of the included simple "web servers," which are disabled by default. The are enabled by adding the "quick" or "slow" -W options (the *capital* 'W' is important!):
  /etc/wlanpoke/wlanpoke.sh -W slow &   or     /etc/wlanpoke/wlanpoke.sh -W quick &

If you want to specify a port other than the default 8080 (e.g., the standard www port 80), add -Wp #:
  /etc/wlanpoke/wlanpoke.sh -W slow -Wp 80 &
but a radio remote control web page on that port would be delightful, no?

If you are debugging occasional failures to always keep your system running without rebooting, then you should preserve your logs by saving them to a location that is not wiped out during reboot like the default '/var/log/' directory. The recommended location is /etc/log/. Don't forget the forward slash (/) at the end. Add the -d option:
  /etc/wlanpoke/wlanpoke.sh -d /etc/log/ &

You can optionally enable quick reset for troubleshooting or use by adding the -Q option, e.g.:
  /etc/wlanpoke/wlanpoke.sh -d /etc/log/ -Q 3 &

Don't forget to include your other options, e.g.:
  /etc/wlanpoke/wlanpoke.sh -d /etc/log/ -W slow &


Manual Launch

You don't have to run at boot-up. You can ssh in and run the app manually. You would do this after hacking the wlanpoke.sh or rcS.local scripts, and testing your changes.
  /etc/wlanpoke/wlanpoke.sh &

Be sure to include your desired options before the '&'. This kills the last launched wlanpoke and runs a new process in the background. The new process optionally launches a new web server, which kills any old one before starting.

To test it as launched from boot-up, run
  /etc/init.d/rcS.local

Use 'vi' to modify the scripts. If using a Windows editor, make sure that the files are saved with unix line endings, otherwise a trailing ^M will mess up the scripts.

You could define and optionally save shell functions to do the launch, e.g.:
  wpgo () { /etc/init.d/rcS.local & }


Modifying the wlanpoke Script

You can change the defaults by editing the script. Find the shell variable and change its value. You should duplicate and comment out ('#') the line to preserve the original value for later reference. Most of these variables are at the beginning of the script. Look at the Help () function to see which variables are which. Changing these variables if helpful for those experimenting with changing other app aspects in that it facilitates testing by eliminating the typing required to launch.

Although there are a boatload of command line options and defaults, many important characteristics are hard coded in the script. You may want to experiment with these to improve the wireless disconnection the recovery time. Here are some of the most obvious constants to change.

PINGWAIT=1
  This sets the number of seconds to wait for ping to succeed, otherwise a logged failure. This wss a -w command line option, but removed. If you have a really awful connection or very busy LAN, you might have to accommodate large ping times. In this case, set the ping failure time higher, e.g., 2 seconds or more. Or, better, improve your LAN or AP.

PINGSECS=2
  * This sets the interval between 'ping' connectivity checks. Overridden by the -S command line switch.

PINGRESET=6
  * This specifies the 1 or 2 second time periods (PINGSECS) to wait (2x6=12 seconds) after a ping failure before restarting the network. A ping failure may result from a network cable change, or a router reboot, or a missed packet, or a slow return > 1 second. The radio wireless system can tolerate some of this, and we don't want to restart too soon. Overridden by the -F command line switch.

PINGQUICK=-1
  * This specifies the 1 or 2 second time periods (PINGSECS) to wait (2x6=12 seconds) after a ping failure before quickly resetting the network. Overridden by the -Q command line switch. Be default, this is set to -1 to disable.

Quick_method=power
  * This specifies the quick reset method. See the discussion under -Qm option above.

PowerNap=500000
  * This specifies the number of uSecs to sleep between disable and enable radio in the power nap method. 
  
FRstSleepMin=12
FRstSleepMax=60
 * These specify the minimum and maximum times to hold off a full reset after ping fails. The hold off time is set to the minimum at launch, and is incremented if a full reset fails to recover. The default minimum of 12 is a bit aggressive, and could result in one additional delay as the script resets the wireless just before it would have been reestablished. The maximum is perhaps too high (or maybe not). Weak signals < -50dbm will typically have more reception problems and take longer to establish a working connection. Try to boost your signal level.
 A lengthy network outage (router reboot) would increment the step to the max, which would then wait the maximum time before resetting the radio during a wireless outage. Previously, the step incremented but never decremented. The current version calculates a safe step based on the last results.

FRStepPct=40
  * This specifies the percentage steps of increasing time to hold off a full reset after a previous full reset has not (yet) recovered. This value is used to calculate a table of hold off times starting with the minimum and ending below the maximum.
  To use a custom fixed step table, include a file that has shell function to generate the table, or just uncomment the existing example function and its call in the script.

TimeFmt=":"
  Set this to specify a timestamps format. The default ":" gives ...HH:MM:SS, "-" does ...HH-MM-SS, and a custom fully specified 'date' format, e.g., "-Isec" gives  'date' that format string. The hyphen ("-") does YYYY-MM-DD_HH-MM-SS and avoids colons, which cause problems when saving a file with a name containing that time stamp.
  
GapsListMax=120        
  This sets the maximum number of characters in the Gaps List report, a list of the most recent outage and connected seconds, starting with the latest first and continuing until it reaches the specified length. Old entries are trimmed as new ones are added. Increase the setting for more entries, decrease it to fit on a narrow screen.
  
ResetsListMax=120
  This is the setting for the Resets List report, similar to GapsListMax above.

RestartNetwork(): sleep 5
  * This allows the wireless driver to restart and reconnect before launching 'dhcpc', which gives up rather quickly. The 5 second delay makes it more likely to succeed right away. You may need to adjust this higher if it takes longer for the driver to reconnect.

LOGKEEP='3'
  Don't crash or constrain your radio by consuming all the storage with logs (use 'nc' instead). We don't know what a reasonable maximum log storage limit might be. It seems safe to consume a little over half of what syslogd's 'messages' files take, or ~250 KB.

CB_SIZE=8
  Sets the circular buffer size to capture 7 two-second statistics prior to a ping failure, plus the failure. You may want more, or can get by with fewer.

Main loop: $IPFIRST == "169"
  You may want to test the second byte "154" to be more accurate. You may also want to add another test if your radio is somehow getting a bogus IP address.

Main loop: sleep 1
  * Allows 'dhcpc' some time to obtain ip and gateway addresses, which are necessary to validate prior to checking connectivity.


* These constants, plus the wireless system calls, determine how long it takes the script to restore wireless connectivity. Ideally, the outage time should be short enough to not cause disruption to the playing music. Longer outages may interrupt playing, and require pressing a key to dismiss a player message, which is annoying, but not the complete disaster a reboot would be. Keeping SSH sessions alive is also a consideration: outages too long will cause an SSH session to fail, losing the session, its history, and ephemeral functions and values. The current settings under the current conditions have so far kept the music playing, with only occasional SSH sessions timing out.

ResetQuick ()
  The investigation into the root causes of the outages continues. The wireless monitoring utility wpa_cli is under suspicion. Code has been added to test for its presence and to relaunch it if it is no longer running. This utility working is important to the quick reset method. The full reset method restarts the entire network stack, including wpa_cli, so it is not affected. You may wish to edit the ResetQuick function to add or remove commands as the investigation continues, then enable it (it is disabled by default).

For software modification testing, a hard wired serial connection, which survives wireless disconnection, is preferred. You can connect a serial connection plus 5 volt power (Gnd TxD RxD +5) from the radio to a reliable $4 NodeMCU wireless module programmed as a telnet to serial converter, or just run a serial cable to a 'TTL' level serial interface on a pc.


Modifying the Optional Server Scripts

The optional web or other server is currently implemented by three shell scripts. These scripts are enabled by the -W wlanpoke option. A detailed explanation is beyond the scope of this document.

ahttpd.sh
  is the main script that does mostly housekeeping. The two servers are at the end. Both of them use netcat (nc) to handle incoming requests and send out responses. The quick server just responds to every connection with a web page from awstats.sh. The slow server calls arequest.sh to parse the incoming request, then passes the request to awstats.sh to generate a response.

arequest.sh
  parses the incoming request when using the slow server, using a very simple but slow algorithm. Or, at least, something is very slow here. Improvements would be appreciated. The parser plus the code in awstats.sh to serve a file make for an open system. There is no code to process a PUT request, but then there is no checking for shell escapes, either.

awstats.sh
  generates a response according to the incoming request if called from the slow web server. If called from the quick server, it sends a web page of WLAN statistics. Feel free to add or substitute the items on the status page, or disable the file serving. On the other hand, you may consider including some graphics, etc., on the page. Good luck.

To test your modifications, you can launch the web server directly from the command line (shell prompt):
 ./ahttpd.sh (options) -F &

where the options are:
 -p * http server port (default 8080)
 -F   run slower 'full server' instead of default quick server (default NOT yes)    [that means no]
 -c   show copyright and license notice and exit
 -h   help and version (0.1.1)

All the housekeeping stuff at the start of ahttpd.sh check options and kill older processes. It contains "killall" nc and cat statements that may interfere with wlanpoke sending messages at that moment, but this is not critical (famous last words). The statements were included during development to get rid of hung nc sessions that tied up the desired listening port, a bug. The cat statement was thrown in for good measure. Perhaps the problem has been fixed, and this is no longer necessary.


Customize gs.bat and Create gs.sh

The gs.bat Windows script quickly fetches failure status information from a list of radios running wlanpoke and the 'slow' ahttpd.sh server:

  for %%d in (Radio1 192.168.0.8 Radio3) do curl http://%%d:8080/RawFails

Make a list of the host names or ip addresses of your radios, then edit the example script to replace the example names and ip addresses in () with that of your radios. Run the script in a terminal (command prompt) window.

Your radios should have fixed ip addresses. Reserving a separate ip address for each radio in your router's dhcp server. You can further ease matters by assigning host names to each radio, and adding these to your router's static dns table, or to a "hosts" file on your computer. The Windows hosts file is located at \Windows\system32\drivers\etc\hosts, and requires administrative rights to modify.

The gs.sh shell script is not included, but here it is. Replace the examples between "in " and " ;" (the spaces matter).

  for i in Radio1 192.168.0.8 Radio3 ; do curl --http0.9 http://$i:8080/RawFails ; done

If you do not include the --http0.9 option, you may get a "Received HTTP/0.9 when not allowed" error. If you assign your radios consecutive ip addresses, you could try something like this:

  for i in 0 1 2 3 4 5 6 ; do curl --http0.9 http://192.168.0.2$i:8080/RawFails ; done

See Log File Analysis above.


Uploading Local Log Files to the Desktop

If you are troubleshooting connection issues or modifying the script, it may be helpful to examine the local log files.

If you are using pruned log files instead of rotation, just upload "/var/log/wlanerr.log".

To upload rotated log files, first concatenate some or all of them into a temporary log file, upload the temporary file, then delete it. The included 'uplogs.sh' script concatenates the most recent logs to a single file and uploads it to your tftpd server with name reflecting the radio name and a timestamp:
  /etc/wlanpoke/uplogs.sh <ipaddress>

To avoid typing the tftpd server ip address, edit 'uplogs.sh' to change the default server address. Feel free to make other changes. To make it even easier, you can add a shell function to your profile, then just enter 'ug' (the 'ul' function name has been taken):
  ug () { /etc/wlanpoke/uplogs.sh ; }

You could save this script function (e.g., as 'uplogs.sh') to do this more easily, perhaps adding testing for each file's existence before concatenating, etc.

You could also edit the awstats.sh file to do this or just return the logs to the browser given a special (e.g., 'logs') URL. You would use the 'slow' web server option to decode the URL.


Log File Analysis

You may wish to aid in troubleshooting the "Wireless Connectivity Loss" issue. We need clues. Examining your log files is a start. The wlanpoke software contains significant instrumentation to aid in troubleshooting the fundamental Wireless Connectivity Loss issue.

Each disconnect incident is logged. The tcp logger receives the disconnect event first, followed by the reconnect event, and then 8 status snapshots 2 seconds apart ending with the disconnect snapshot. The local log file '/var/log/wlanerr' (or e.g., '/etc/log/wlanerr') and its rotated backups are written in real time, and log every first failed ping. First failed pings are not transmitter to the tcp logger unless the script resets the radio, and until the radio is reconnected. Each incident begins with a record separator, then the disconnect event, 8 snapshots, and the reconnect event.

To derive the outage time, subtract the "ping ok" time (first entry) from the failed time (second time). The result is within a few seconds. This is the network connectivity outage, but the player will take some additional time to reestablish a failed connection, so the total interruption is longer.

Here is an example recovery log entry, with line breaks added and some items (...) deleted:

2021-03-31_12:47:11 Ofc2S.21_0827d failed 2021-03-31_12:44:15 quick reset 2021-03-31_12:46:13 up 2021-03-31_12:46:40
...Link Quality:24/94 Signal level:-71 dBm
...fails 30
... (RawFails Statistics, see below)

Note the poor signal level and link quality, -71 dBm and 24/94. This will cause problems because the dhcp client will have difficulties obtaining an ip address and gateway, and the script will reset the system again before it can successfully complete.

Here, the radio failed at 12:44:15 and recovered at 12:47:11, a huge outage of 176 seconds! The software did not try a quick reset (no entry after "quick"), and performed the 3 full resets, the last after 117 seconds. That reset process was over after 37 seconds, and a successful ping recorded after 58 seconds. The first successful ping came after 30 previous failures, which triggered 3 full resets (see below).

(Entries that recover after the quick reset do so immediately after a ~7 second delay to detect the outage. This short delay might not be noticeable. The full resets take ~40 seconds to recover, with some audible interruptions under some circumstances, especially in the case of synchronized radios. However, the quick reset had side effects that made the system unreliable, so it has been disabled pending further investigation.)

Normally it takes 19 seconds after the first ping failure until the reset starts. The script is spending a significant amount of time doing this and that between its default 2 second sleep periods. Here the average cycle time is about 3 seconds, 1 second more than the specified 2 seconds. Because the software calculates seconds as trials * sleep seconds, the 'seconds' statistics and parameters are too low by 50%. No attempt other than this note is made to compensate for this.


RawFails 'Web Page'

For another example, see RawFails Summary Report Analysis, below. This report returns a connection status report in a few lines:

LRUE wlanpoke.sh 0.8.7.1 4/6/2021 launched 2021-04-06_10:11:51 1617718311 Options: -W slow -d /etc/log/
2021-04-06T20:14:08-0400 ( 20:14:08 up 12 days, 19:18, load average: 2.46, 2.37, 2.25 )
... (RawFails Statistics, see below)

The first line shows the software version and launch date and time, followed by the launch 'unix time' (number of seconds since 1/1/1970), then the launch options. The second line is the time and date of the report, followed by the 'uptime' of the radio. The subsequent lines display the RawFails Statistics, see below.


RawFails Statistics

(This rather inactive example comes from the now too-quiet WiFi environment here. Yours may be more exciting.)

The disconnect and reconnect entry above includes a 3-line statistics portion with significant event counters, and a 'Failed Pings' array.  These may be helpful in setting the optional parameters -S -Q -F (see above) and the 'Reset Hold off Time' step values. Another array holds data to evaluate the hold off time step increment algorithm, and another shows outage and connections times.

The statistics portion consists of 4 lines. This data is also included on the RawFails web page. Here are the statistics from the example just above:

Example 1:
Ping 2s-1q6f Events, Fails[0..7] 36126s :    Qr:0 Fr:6   Wr:2 Wc:0  [ 11357 64 0 0 0 0 5 1 ]
Step 0:1, limit:results: [ 12:2,0,0,0,0,0, 18: 26: 37: 53: ]   Wlan: Rate=48 Quality:38/94 level:-57 retries:728
(see Gaps and Resets, below)

Example 2:
Ping 2s-1q6f Evants, Fails[0..30]:   Qr:0 Fr:3   Wr:0 Wc:0  [ 16898 7 0 1 0 0 0 0 30:1 ]
Step 2, limit:results: [ 12:12, 18:18, 26:18, 37: 53: 75: 106: ]   Wlan: Rate=36 Quality:24/94 Signal level:-71 retries:1
(The first 2 lines)

The first line begins with a settings summary and elapssed time in seconds, followed by some event counters, then a vector of 'Fails.' The events are Quick Reset (Qr), Full Reset (Fr), wpa_cli Restart (Wr), and wpa_cli process changed (Wc).

The default -S, -Q, and -F settings of 2, -1, and 6, respectively, create array indexes of [0..7] to display the number of failed pings counted before the system has a successful ping. Besides the 0 slot, one slot more (7) than the full reset setting is always displayed. Counts of recoveries with prior failures greater than those are also shown as "Failures:Count". 

Example 1 shows 11357 pings with no preceding failures, 64 times where ping failed once, no times where it failed 2, 3, 4, and 5 times before recovery, and 5 times where it recovered after the 6th trial. The 6th trial failures triggered full resets. These resets took some time, pausing ping trials, and by the time the trials resumed, in 5 cases, the system had recovered with no additional failures, and in 1 case, after 1 additional '2 second' trial. 

Example 2 shows 0 quick resets (quick was disabled), 3 full resets, 0 wpa_cli relaunch, and 0 wpa_client process changes not caused by the full resets. There was a reset in which the radio recovered after 30 failed pings, so the index [30] value was incremented, and the entry is displayed as "30:1" for this first time. A second time with the same 30 trial recovery would show "30:2," and so on. This occurs after multiple full resets as the script increments the hold time step and waits for longer times to recover.

The second line is a summary of full resets, with the number of pings before recovery (or subsequent reset) indexed by reset hold off time, "Limit:Failures" both reported in 'script seconds' (not ping trials). Each "Limit:" entry is followed by a comma separated list of the most recent failures, latest first. This information can be used to evaluate how well the limits are doing. We hope that higher limit entries will be empty. Entries there mean that the software waited increasingly longer times for the system to recover after a full reset. But if the network goes down for any lengthy time, then the last entry will have the a large number as the radio again and again resets only to find no connection.

Example 1 shows the current reset wait time step at 0, with the 1 being the last failed ping count after reset. This 1 '2 second' additional delay is shown in the previous line in the [7] index, and as an entry in the following step 0 (12 second) '2' entry. 5 previous failures recovered with no additional failures after the reset process, and are indicated by the five '0,' entries after the step 0 '12:" label. An entry of 0 means no failed pings after the reset, meaning that the reset process took enough time for the system to recover before trying the next ping. There were no uses of the higher level steps, so their entries are empty.

Example 2 shows far more serious issues with a full reset failing twice before it finally succeeded with a recovery at 18 'seconds' permitted by a limit of 26 'seconds.' Here, the first hold-off time step, with a value of 12 seconds, displayed one entry of 12 seconds (the max) additional ping failure time. The full reset itself takes about 20 seconds to complete. The value of 12 indicates that the full reset #1 failed. 

The subsequent entries (... 18:18, 26:18, 37: ...) indicate that the system had a failed reset #2 with an 18 second limit, then a successful reset #3 result with an 18 second recovery with a 26 second limit. Note that the 18 second result would have just made the 18 second limit, but before reset #2, the radio had not recovered by the 18 second limit.

The script left the current step at 2. It computed that the step 1 limit of 18 would not be prudent because the last result (18) would have only barely succeeded.

Gaps and Resets

Here are lines 3 and 4 from Example 1 above:

Gaps:70 @1617754437 -Gap+OK secs: +8,-4+99,-3+1637,-4+194,-4+39,-4+164,-5+739,-56+24,-5+356,-3+354,-3+264,-3+110,
Resets:6 @1617754438 -Gap+OK secs: +2905,-56+7722,-40+6611,-40+6038,-38+4128,-40+8383,-39+87,

The Gaps line displays the number of 1 or more ping failures since launch, and a list of the most recent gaps measured in real seconds, the last first, and older entries discarded. A '-' indicates a gap, and '+' a continuous connection. 

The @ indicates the unix time of the report. To get the clock time of a gap, add the absolute value of the numbers starting from the left to the event, then subtract that from the unix time. If desired, convert that to a human readable time, e.g., `date -d @UnixTime` (but don't forget the -d, otherwise you will set the device's time to that time!).

For example, the "-56+24," entry shows a large 56 second gap. Adding the preceding numbers, 
+8+4+99+3+1637+4+194+4+39+4+164+5+739+56 = 2960 seconds. Subtracting from the unix time: 1617754437-2960 = 1617751477
date -d @1617751477 = "Tue Apr  6 19:24:37 EDT 2021." Hey, that was just now! [Well, it was then.]

The Gaps list gets large. The 70 gaps since launch would take ~9 * 70 = 630 characters, and this is for just 36126 seconds (~10 hours) of operation. The list is trimmed (see GapsListMax) to make it manageable.

The Resets line is just like the Gaps line, except it displays the outages and connections times for and between resets. That '-56' second reset came after 7722 seconds on reasonable (but not perfect) connectivity. Let's see: +2905+56 = 2961, 1617754438-2961 = 1617751477, date -d @1617751477 = "Tue Apr  6 19:24:37 EDT 2021." That the same time as above!

Quick Reset Logging

When quick reset is used and does not restore the connection quickly enough, the full reset function starts, just as if quick reset were not used. In this case, the full reset closes the open quick reset record with a (false) '+' recovery time (about 20 seconds). The following full reset entry shows the same time as a negative connected time using two signs, '+-', to compensate and cancel the quick reset false recovery time. 

To calculate to a time in the past, the ',-' pattern should be '+', but '+-' should be changed to '-' so that the number subtracts from and cancels the subsequent false recovery time. You can use sed to do this. 

The following radio example contains three such events, with the list truncated to a point of interest:

a=+2697,-45+-24,-24+217,-15+222,-16+663,-15+5503,-45+-21,-21+12,-20+23,-16+15,-15+11964,-43+-21,-21+214,-16+73,-17+38,-16+2941,-54+-20,-20+10,-17+9,-15+1059,
b=`echo $a | sed -e 's/,-/+/g' -e 's/+-/-/g' -e 's/,//g'` ; echo $b
+2697+45-24+24+217+15+222+16+663+15+5503+45-21+21+12+20+23+16+15+15+11964+43-21+21+214+16+73+17+38+16+2941+54-20+20+10+17+9+15+1059+15+145
d=$((bc)) ; echo $d
26185

The first line assigns the truncated list to a new shell variable, 'a'. The second line changes the signs, removes the commas, and assigns it to 'b'. The third line is the output of the previous echo $b statement. The forth line performs the calculation, assigns it to variable 'd', and echos the result, on the fifth line. The next steps would be to subtract that number from the unix time (not shown) at the head of the list, and convert that to a human readable time and date (see above). 

Commentary

These statistics provide a sense of the adverse activity confronting these radios, and the steps taken to mitigate the problems. A few things stand out: 

First, the recovery times of 30-60 seconds, frequently more with weak (< -65 dBm) signals, is far too long. This might be improved by setting the initial trigger lower, e.g., 3 trials instead of 6, and not waiting during the reset process for it to complete before resuming trials. The first action would cause the reset to happen earlier, which is good. The second would cause the software to resume measuring the system earlier, which is irrelevant to the radio resuming play. The first action had been handled by a quick reset function after 3 failures; however, it was temporarily  disabled because it sometimes led to wlanpoke never resetting the radio due to several software bugs. This might be re-enabled by default in the future, and you are welcome to do so for your own trials.

Second, the 11357 zero failures in 36126 seconds show that the cycle time per trial is 36126/11357 = 3.18 seconds, significantly higher than the specified 2 second trial time. That is why the quotes around '2 second' in the text. 


Desktop Analysis

The radio has its hands full producing these log entries. Analysis is the job of the desktop or server. Besides the status information itself, important statistics may be helpful, including:
o Disconnects vs time of day (TOD), and day of week (DOW). Is there any pattern?
o Disconnect duration vs TOD and DOW.
o Disconnects per DOW.
o Disconnects vs radio.
o Disconnects vs each radio's connected access point.
o Disconnects vs scanned access points (scan_results) could show nearby possibly rogue access points, or strong neighbor WiFi signals.
o Disconnects vs devices connected to the LAN (local area network).

A python or other app to analyze these logs would be helpful. Care to write one? You can check out one user's analyzer at:
 https://github.com/castorfou/squeezebox_wlanpoke_plot


In addition, it may be helpful to add a network connection logger to log LAN connects and disconnects, and connected devices scanner to keep a chronological log file. For Windows, the Nirsoft utilities 'NetworkConnectLog' and 'Wireless Network Launcher" are very handy. The useful nmap.org app 'Nmap' and its GUI version 'Zenmap' might be helpful with LAN monitoring.


RawFails Summary Report Analysis

The optional 'slow' web server can return a 'RawFails' request to produce, for example:

MSB wlanpoke.sh 0.8.7.1 4/6/2021 launched 2021-04-06_10:12:06 1617718326 Options: -W slow -d /etc/log/
2021-04-07T06:17:29-0400 ( 06:17:29 up 6 days, 15:30, load average: 1.02, 1.07, 1.09 )
Ping 2s-1q6f Events, Fails[0..10] 72293s :    Qr:0 Fr:7   Wr:3 Wc:0  [ 21935 557 25 1 0 0 3 1 8:1 9:1 10:1 ]
Step 0:0, limit:results: [ 12:8,0,4,2,0,0, 18:0, 26: 37: 53: ]   Wlan: Rate=5.5 Quality:29/94 level:-66 retries:38
Gaps:590 @1617790619 -Gap+OK secs: +56,-3+41,-5+28,-3+232,-4+45,-3+56,-3+11,-4+196,-3+103,-3+257,-3+97,-4+66,-3+51,
Resets:7 @1617790619 -Gap+OK secs: +1569,-58+9002,-58+4971,-39+10349,-52+8543,-48+12708,-40+13879,-43+10934,

The report consists of 6 lines, consisting of the radio's name, wlanpoke version, launch times, and launch options. The second line is the report time and the radio uptime report. The third and forth lines are the ping fails and recovery reports mentioned above. The fifth and sixth lines display the most recent minor and severe outages. The gs.bat or gs.sh scripts automate fetching these reports, but they must be customized before use, and they require 'curl' utility for use.

You don't need a browser or curl to enjoy this view. Just ssh into the radio, and enter the following:
  cd /etc/wlanpoke
  export REQUEST=RawFails
  ./awstats.sh

to display the report. The script needs to run from the wlanpoke app directory. The exported RESUEST value tells the script what to display.


Uploading Log Files to a Forum

You may choose to upload your log file(s) to a forum or other location. If so, you may want to de-identify (remove identifying information) from the file before uploading. The 'sed' stream editor is convenient for this purpose. Create a 'sed' command line including all the word pair patterns you wish to rename. This line may become long, and you may want to split it into several separate commands.

Here is one (with the original identifiers themselves de-identified!) example:

sed 's/Rooster/Radio1/g;s/Chicken/Radio2/g;s/Plaza/Radio3/g;s/Forest/Radio4/g;s/Desert/Radio5/g;s/Marsh/Radio6/g;s/Garden/Radio7/g;s/HomeAC/AP1/g;s/HomeG/AP2/g;s/.1.2/.0.1/g;s/.1.1/.0.1/g;s/\.1\(.\)_/.0\1_/g' t1121.log > t1121_did.log

With 7 radios and 2 access points, the line is quite long. The radio names, access point names, and ip addresses are changed in a consistent way, helpful for subsequent uploads. A semicolon (';') separates each match. Of course, upload only the "t1121_did.log"!

Compress the resulting file using the very common zip deflate method. A separate "LAN.txt" file listing your wireless access point(s) and router make(s), model(s), and version(s) would be very helpful to identify problematic access points and routers.

Do not upload an uncompressed log file to a forum! It is ok to include a small snippet in a forum post, but please do not "junk up" a forum topic with gibberish log entries. Snippets should be shortened by replacing unimportant information with ellipses ("...") (pl of ellipsis).



Included Files

wlanpoke.sh         the ash shell script
manual.txt          this user and installation manual
rcS.local.example   example rcS.local script
ahttpd.sh           optional web server script
arequest.sh         used by the slow web server to parse requests
awstats.sh          generates a web page for the optional server
uplogs.sh           script to upload logs to a desktop tftpd server
history.txt         To Do and history (change log)
LICENSE.md          Short version of GPL3 license
README.md           first part of this manual.txt plus news...

end

